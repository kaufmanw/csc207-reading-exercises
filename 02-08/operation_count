function for reference:

public static int max(int[] arr) {
  if (arr.length == 0) {
	throw new IllegalArgumentException(); // ignore this case
  } else {
	int ret = arr[0];
	for (int i = 1; i < arr.length; i++) {
	  if (ret < arr[i]) {
		ret = arr[i];
	  }
	}
	return ret;
  }
}

the relevant input is the length of the array (will refer to this as n)
the operation I will count is the array accesses (i.e. each time we see arr[i])
best case; we walk a nonincreasing array so we never get past the guard in the if statement and only have to access each array element once, so this is n accesses.
worst case; we walk a strictly increasing array, so we must access each array element twice (except the first), so we have 2n - 1 accesses.
average case; this is kind of a hard question? if we assume that the nth element is 1/n to be the biggest element so far (seems like a reasonable assumption), then the number of times we access the nth element on average is (1 + 1/n), since once is guaranteed and the chance it is the largest so far is about - and thus us having to access it again - is 1/n. So we have n + 1/2 + 1/3 + 1/4 + ... + 1/n. Note I don't want a 1/1 term in the fractions, as the first is always accessed once, even though it is the biggest so far. I think I'm making an assumption about independence that isn't exactly obvious but I don't think I can do better.


The max and min cases are linear; they both take the form mx + b
The average case is less obviously linear, but since it is lower bounded by n and upper bounded by 2n for all values, I think we can safely say it is linear as well.
